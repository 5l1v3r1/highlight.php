<?php

use Sabberworm\CSS\Property\Selector;
use Sabberworm\CSS\Rule\Rule;
use Sabberworm\CSS\RuleSet\DeclarationBlock;
use Sabberworm\CSS\Value\Color;
use Symfony\Component\Finder\Finder;

require __DIR__ . '/../vendor/autoload.php';

$finder = new Finder();
$finder
    ->in(__DIR__ . '/../styles/')
    ->name('*.css')
    ->files()
;

$backgroundColors = array();

/** @var \Symfony\Component\Finder\SplFileInfo $file */
foreach ($finder->getIterator() as $file) {
    $color = '#ffffff';
    $cssParser = new Sabberworm\CSS\Parser($file->getContents());
    $cssDocument = $cssParser->parse();

    /** @var DeclarationBlock $ruleSet */
    foreach ($cssDocument->getAllRuleSets() as $ruleSet) {
        /** @var Selector $selector */
        foreach ($ruleSet->getSelectors() as $selector) {
            if ($selector->getSelector() === '.hljs') {
                $bgColor = $ruleSet->getRules('background');

                if (empty($bgColor)) {
                    $bgColor = $ruleSet->getRules('background-color');
                }

                /** @var Rule $value */
                foreach ($bgColor as $value) {
                    if ($value->getValue() instanceof Color) {
                        $color = preg_replace('/background(?:-color)?:\s|;/', '', (string) $value);

                        break 3;
                    }
                }
            }
        }
    }

    $backgroundColors[] = sprintf(
        "%s'%s' => '%s',",
        str_repeat(' ', 8),
        $file->getBasename('.css'),
        $color
    );
}

$document = <<<'PHP'
<?php

// DO NOT MODIFY. This file is automatically generated.

/**
 * Get the background color for a specific CSS theme.
 *
 * @param string $theme The theme name
 *
 * @throws \DomainException when no stylesheet with this name exists
 *
 * @return string
 */
function _getThemeBackgroundColor($theme)
{
    $colors = array(
{colorMapping}
    );

    if (!isset($colors[$theme])) {
        throw new DomainException("There is no stylesheet by the name of '$theme'");
    }

    return $colors[$theme];
}

PHP;

$document = strtr($document, array(
    '{colorMapping}' => implode("\n", $backgroundColors),
));

file_put_contents(__DIR__ . '/../HighlightUtilities/_themeColors.php', $document);
